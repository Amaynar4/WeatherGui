/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.weatherguitest;

import java.io.IOException;
import static java.lang.Math.round;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.json.JSONObject;
import java.text.SimpleDateFormat;
import java.util.Calendar;


/**
 *
 * @author Adam's
 */
public class MainWindow extends javax.swing.JFrame {

    WeatherData weatherInfo = null;  
    double rounded;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        Update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTitle = new javax.swing.JLabel();
        infoPanel = new javax.swing.JPanel();
        currentCityText = new javax.swing.JLabel();
        CitySearchBar = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        skyIcon = new javax.swing.JLabel();
        currentTemp = new javax.swing.JLabel();
        skyCond = new javax.swing.JLabel();
        maxTemp = new javax.swing.JLabel();
        minTemp = new javax.swing.JLabel();
        windSpeeDir = new javax.swing.JLabel();
        airPress = new javax.swing.JLabel();
        humidity = new javax.swing.JLabel();
        sunriseSunset = new javax.swing.JLabel();
        lastRefreshed = new javax.swing.JLabel();
        Refresh = new javax.swing.JButton();
        LongTermWeather = new javax.swing.JButton();
        ShortTermWeather = new javax.swing.JButton();
        MarsWeather = new javax.swing.JButton();
        userPref = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Main Window");
        setMinimumSize(new java.awt.Dimension(1050, 550));

        mainTitle.setBackground(new java.awt.Color(204, 0, 0));
        mainTitle.setFont(new java.awt.Font("Corbel", 1, 36)); // NOI18N
        mainTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainTitle.setText("The Weather Project - Main Menu");
        mainTitle.setToolTipText("The Weather Project");

        currentCityText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentCityText.setText("Current City :");
        currentCityText.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        CitySearchBar.setText("Enter a city name...");
        CitySearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CitySearchBarActionPerformed(evt);
            }
        });
        CitySearchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CitySearchBarFocusGained(evt);
            }
        });

        skyIcon.setText("sky Icon");

        currentTemp.setFont(new java.awt.Font("Myriad Pro Light", 0, 36)); // NOI18N
        currentTemp.setText("current Temp");

        skyCond.setText("sky Condition");
        skyCond.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        maxTemp.setText("Max Temp");
        maxTemp.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        minTemp.setText("Min Temp");
        minTemp.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(skyIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentTemp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(skyCond, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(maxTemp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(minTemp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(currentTemp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(skyIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(skyCond, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minTemp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        windSpeeDir.setText("Windspeed and direction ");
        windSpeeDir.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        airPress.setText("air pressure");
        airPress.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        humidity.setText("Humidity");
        humidity.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        sunriseSunset.setText("Sunrise / Sunset");
        sunriseSunset.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lastRefreshed.setText("Last Refreshed : ");

        Refresh.setText("Refresh");
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(airPress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(humidity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(windSpeeDir, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                            .addComponent(sunriseSunset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(currentCityText, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CitySearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastRefreshed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(currentCityText, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CitySearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lastRefreshed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Refresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(windSpeeDir, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(airPress, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(humidity, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sunriseSunset, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)))
                .addContainerGap())
        );

        LongTermWeather.setText("Long Term Forecast");
        LongTermWeather.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LongTermWeatherActionPerformed(evt);
            }
        });

        ShortTermWeather.setText("Short Term Forecast");
        ShortTermWeather.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShortTermWeatherActionPerformed(evt);
            }
        });

        MarsWeather.setText("Mars Weather");
        MarsWeather.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarsWeatherActionPerformed(evt);
            }
        });

        userPref.setText("User Preferences");
        userPref.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userPrefActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(LongTermWeather, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(ShortTermWeather, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(MarsWeather, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(userPref, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(mainTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ShortTermWeather, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MarsWeather, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userPref, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LongTermWeather, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CitySearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CitySearchBarActionPerformed

        //pull information from the text field
        //parse the data
        //use JSON method to find if city is valid
        //pull information on the city and have the fields updated

        // TODO add your handling code here:
       
        Update();
        
    }//GEN-LAST:event_CitySearchBarActionPerformed

    private void ShortTermWeatherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShortTermWeatherActionPerformed
        // TODO add your handling code here:
        
         dispose();
        
        new ShortTerm().setVisible(true);
        
    }//GEN-LAST:event_ShortTermWeatherActionPerformed

    private void MarsWeatherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarsWeatherActionPerformed
        // TODO add your handling code here:
        
         dispose();
        
        new Mars().setVisible(true);
        
    }//GEN-LAST:event_MarsWeatherActionPerformed

    private void userPrefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userPrefActionPerformed
        // TODO add your handling code here:
        userPref.setText("no function");
        
    }//GEN-LAST:event_userPrefActionPerformed

    private void LongTermWeatherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LongTermWeatherActionPerformed
        // TODO add your handling code here:
        
        dispose();
        
        new LongTerm().setVisible(true);
        
    }//GEN-LAST:event_LongTermWeatherActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        // TODO add your handling code here:
        
        Update();
        
    }//GEN-LAST:event_RefreshActionPerformed

    private void CitySearchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CitySearchBarFocusGained
        // TODO add your handling code here:
        
        CitySearchBar.setText("");
        
    }//GEN-LAST:event_CitySearchBarFocusGained

    private void Update() {
        
        String searchText = CitySearchBar.getText();
        Calendar cal = Calendar.getInstance();
        
        if ((searchText == null) || (searchText.equals("Enter a city name..."))){
            
            lastRefreshed.setText("No city provided, could not update");
            
            weatherInfo = new WeatherData();
            
            rounded = Math.round((weatherInfo.getTemprature()-273.15)*10.0)/10.0;
            currentTemp.setText(""+rounded);
            skyCond.setText(""+weatherInfo.getSkyCondition());
            windSpeeDir.setText("wind speed : "+weatherInfo.getWindSpeed()+ " , wind direction : " + weatherInfo.getWindDirection());
            sunriseSunset.setText("sunrise : " + weatherInfo.getSunrise() + " sunset : " + weatherInfo.getSunset());
            rounded = Math.round((weatherInfo.getMaximumTemp()-273.15)*10.0)/10.0;
            maxTemp.setText("maximum : " + rounded);
            rounded = Math.round((weatherInfo.getMinimumTemp()-273.15)*10.0)/10.0;
            minTemp.setText("minimum : " + rounded);
            airPress.setText("air pressure : " + weatherInfo.getAirPressure());
            humidity.setText("humidity : " + weatherInfo.getHumidity());
            
            System.out.println(weatherInfo.getSkyIcon());
                        
            lastRefreshed.setText("Last Refreshed : " + cal.getTime()); // method to get current time
            CitySearchBar.setText(searchText);
            
        }//if the search bar is empty or default
        
        else if ((searchText!=null) && !(searchText.equals("Enter a city name..."))){
            
            weatherInfo = new WeatherData(searchText);
            
            rounded = Math.round((weatherInfo.getTemprature()-273.15)*10.0)/10.0;
            currentTemp.setText(""+rounded);
            skyCond.setText(""+weatherInfo.getSkyCondition());
            windSpeeDir.setText("wind speed : "+weatherInfo.getWindSpeed()+ " , wind direction : " + weatherInfo.getWindDirection());
            sunriseSunset.setText("sunrise : " + weatherInfo.getSunrise() + " sunset : " + weatherInfo.getSunset());
            rounded = Math.round((weatherInfo.getMaximumTemp()-273.15)*10.0)/10.0;
            maxTemp.setText("maximum : " + rounded);
            rounded = Math.round((weatherInfo.getMinimumTemp()-273.15)*10.0)/10.0;
            minTemp.setText("minimum : " + rounded);
            airPress.setText("air pressure : " + weatherInfo.getAirPressure());
            humidity.setText("humidity : " + weatherInfo.getHumidity());
            
            
            
            lastRefreshed.setText("Last Refreshed : " + cal.getTime()); // method to get current time
            CitySearchBar.setText(searchText);
            
            }//else if the user entered a city 
    
        else{
                
        int commaIndex = -1; 
        
       boolean hasComma = searchText.contains(",");
        
       if (hasComma){
           
           commaIndex = searchText.indexOf(",");
       
            System.out.println("0 , comma : " + searchText.substring(0, commaIndex));
            System.out.println("commaIndex + 1, length : " + searchText.substring(commaIndex+1, searchText.length()));
       
            String city = searchText.substring(0, commaIndex);
            String country = searchText.substring(commaIndex+1, searchText.length());
       
            weatherInfo = new WeatherData(city,country);
       
            rounded = Math.round((weatherInfo.getTemprature()-273.15)*10.0)/10.0;
            currentTemp.setText(""+rounded);
            skyCond.setText(""+weatherInfo.getSkyCondition());
            windSpeeDir.setText("wind speed : "+weatherInfo.getWindSpeed()+ " , wind direction : " + weatherInfo.getWindDirection());
            sunriseSunset.setText("sunrise : " + weatherInfo.getSunrise() + " sunset : " + weatherInfo.getSunset());
            rounded = Math.round((weatherInfo.getMaximumTemp()-273.15)*10.0)/10.0;
            maxTemp.setText("maximum : " + rounded);
            rounded = Math.round((weatherInfo.getMinimumTemp()-273.15)*10.0)/10.0;
            minTemp.setText("minimum : " + rounded);
            airPress.setText("air pressure : " + weatherInfo.getAirPressure());
            humidity.setText("humidity : " + weatherInfo.getHumidity());
            
            lastRefreshed.setText("Last Refreshed : " + cal.getTime()); // method to get current time
            CitySearchBar.setText(searchText);
           
       }//if there is a comma in the search 
       else{
           
           String city = searchText;
           
           WeatherData weatherInfo = new WeatherData(city);
           
            rounded = Math.round((weatherInfo.getTemprature()-273.15)*10.0)/10.0;
            currentTemp.setText(""+rounded);
            skyCond.setText(""+weatherInfo.getSkyCondition());
            windSpeeDir.setText("wind speed : "+weatherInfo.getWindSpeed()+ " , wind direction : " + weatherInfo.getWindDirection());
            sunriseSunset.setText("sunrise : " + weatherInfo.getSunrise() + " sunset : " + weatherInfo.getSunset());
            rounded = Math.round((weatherInfo.getMaximumTemp()-273.15)*10.0)/10.0;
            maxTemp.setText("maximum : " + rounded);
            rounded = Math.round((weatherInfo.getMinimumTemp()-273.15)*10.0)/10.0;
            minTemp.setText("minimum : " + rounded);
            airPress.setText("air pressure : " + weatherInfo.getAirPressure());
            humidity.setText("humidity : " + weatherInfo.getHumidity());
            
           lastRefreshed.setText("Last Refreshed : " + cal.getTime()); // method to get current time
           CitySearchBar.setText(searchText);
           
       }
       
      }//else a location was provided
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CitySearchBar;
    private javax.swing.JButton LongTermWeather;
    private javax.swing.JButton MarsWeather;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton ShortTermWeather;
    private javax.swing.JLabel airPress;
    private javax.swing.JLabel currentCityText;
    private javax.swing.JLabel currentTemp;
    private javax.swing.JLabel humidity;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lastRefreshed;
    private javax.swing.JLabel mainTitle;
    private javax.swing.JLabel maxTemp;
    private javax.swing.JLabel minTemp;
    private javax.swing.JLabel skyCond;
    private javax.swing.JLabel skyIcon;
    private javax.swing.JLabel sunriseSunset;
    private javax.swing.JButton userPref;
    private javax.swing.JLabel windSpeeDir;
    // End of variables declaration//GEN-END:variables
}
